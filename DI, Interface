dependency injection
transaction management - jdbc 공유를 깔끔하게 관리 해주는 놈?

Java EE 엔터프라이즈 에디션 > 웹개발할려고 깔았던 이클립스 EE랑 같은건가?, 이놈만으로도 웹개발하는데 문제없었지만, Spring이 등장하고 Spring이 EE의 모든 기능과 더 좋은 기능가져서...
Java SE 스탠다드 에디션 > 그냥 자바 할때 깔았던 이클립스?

MVC - 트랜잭션 - 인증과권한
트랜잭션 - 한꺼번에 처리해야할 처리과정들?

스프링이 담당하는 부분들
1. MVC(DI)-느슨한 결합력과 인터페이스
2. 트랜잭션(AOP)
3. 인증과권한(Servlet Filter)
********************************************************************************************************************************************
UI - Service - Interface - DAO - DB

DAO에 A1 B1 B2라는 클래스가 있고(각각 클래스파일로 존재), B1을 더 좋게 만든 게 B2라서 B1을 더이상 사용하지 않는다고 하면
Service에서 B1 b1 = new B1(); 이라는 부분을 B2 b2 = new B2();로 변경해줘야하는 번거로움이 있다.
(결합도가 높아서 하나의 모듈이 수정되면 다른 모든 모듈들도 수정되어야 함)
즉, 모듈(Service)과 모듈(DAO) 사이에 결합력이 너무 높아서 한쪽(DAO)이 바뀌면 다른 한쪽(Service)도 수정해줘야함
이런 귀찮음을 없애기 위해 인터페이스를 사용하여 모듈과 모듈 사이에 결합력을 낮춰버린다.
>>> Service - Interface(A, B) - DAO(A1, B1, B2)
Service에서 B b = new B2(); // 자식객체(B2)는 부모객체(B)에 들어갈 수 있다. 상속개념
그런데 이렇게 해줘도 new B1()을 new B2()로 바꿔줘야하는 건 변하지 않아서 별의미 없다.
그래서 이부분을 스프링이 XML, Annotation을 사용하여 외부설정에서 설정해준다?? (이걸 스프링이 해줄 수 있음)
********************************************************************************************************************************************
DI(Dependency Injection)

더 많이 사용하는 방법 > Case 1
차이점은 Injection 과정이 있냐없냐 인듯?
있다 > Case 1 Association 방법
없다 > Case 2 Composition 방법
********************************************
Case 1. Association 방법 (A객체를 생성할 때 B를 바로 꽂지않고, A객체가 생성된 외부에서 B도 똑같이 생성하여 B를 Injection 시켜주는 방법)
Class A {
  private B b;
  public void setB(B b) { //setter injection 방식
    this.b = b;
  }
  public A(B b) { //Construction injection 방식
    this.b = b; 
  }
}
B b = new B(); //부품(Dependency) 생성
A a = new A();
a.setB(b); //setter방식으로 주입(Injection)
A a = new A(b); //Construction 방식으로 주입

Case 2. Composition 방법 (A객체를 생성할 때 B라는 부품을 꽂아쓰는 방법)
Class A {
  private B b;
  A() {
    b = new B();
  }
}
A a = new A(); //Injection 과정이 없다.
********************************************************************************************************************************************
원래는 A a = new A()로 끝나는 과정을
A도 생성하고, B도 생성하고, A에다가 B를 인젝션까지 해야하니까
인젝션 과정이 사용되는 방식은 조립하는 게 귀찮음
그래서 스프링이 이 과정을 해준다고 한다.
그리고 이 과정을 DI라고 한다.
DI (디펜던시를 인젝션 해주는, 부품을 조립해주는 스프링만의 능력)


