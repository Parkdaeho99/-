스프링 프레임워크
> 부트스트랩처럼 완성된 코드를 가져다 쓰는 건가?

STS
> 스프링 전용 개발 도구?
> 이클립스랑 매우 비슷하다
> Legacy 프로젝트로 작업? (레거시 시스템은 낡은 기술이나 방법론, 컴퓨터 시스템, 소프트웨어 등을 말한다. - 구글링)
> Starter Project는 스프링부트 전용? (스프링부트 - 이것도 스프링 프레임워크의 일종?)
> Legacy 프로젝트 생성 후 패키지 익스플로러를 보니 이클립스랑 너무 달라서 혼란스럽다.

STS 특징 1.
views 폴더 안에 jsp를 모아둔다. -> 바로 접속할 수 없게 되어있다. localhost:8080/~~~.jsp 이렇게 접속불가
STS 특징 2.
프로젝트 생성할 때, " com.yt(보통 회사명).이름 "처럼 작성하는 구간이 있는데, 가장 오른쪽에 쓰여진 이름으로 접속해야 한다
즉, " com.yt.apple" 라고 지정했다면 접속할 때, http://localhost:8080/apple/userSignup.do 이런식으로 접속한다.
STS 특징 3. 
컨트롤러가 만들어져 있다.
프로젝트를 만들면 "home" 문자열을 반환하는 컨트롤러가 있는데, 구글링 해보니 이 문자열 앞뒤로 특정문자열이 더 붙어서 최종 주소를 완성시키는 듯하다.
> 이 부분이 이클립스랑 달랐었다. 이클립스에서는 Model 영역에서 Controller 영역으로 돌아올 때, 리다이렉트 할 지, 포워드 할 지 지정해주었는데 스프링에서는 그런 게 없었다.
> 그렇다면 스프링에서는 최종 주소를 완성시키면 리다이렉트 시키는 건가? 포워드 시키는 건가?
> Model 영역에서 request.setAttribute를 지정한 채로 View에서 그 값을 출력했을 때 정상적으로 나온 걸 봐서는 리다이렉트가 아니고 포워드인 것 같다.
이클립스에서 했던 것처럼 HttpServletRequest, HttpServletResponse 클래스를 컨트롤러에서 만들고 Model 영역으로 데이터를 넘겨줄 수 있었다.

STS 특징 4.
어노테이션이 많다.
구글링 해보니까 어노테이션으로 파라미터를 받아오는 방법도 보였다.
어노테이션은 큰 역할이 없을 줄 알았는데 스프링에서는 있는 듯하다.

STS 특징 5.
pom.xml에 라이브러리 입력
파일 업로드에 필요한 라이브러리들을 pom.xml에 입력합니다.
출처: https://webcoding.tistory.com/entry/Spring-스프링-파일-업로드하기?category=798456 [심플한 코딩 백과사전]

의문
STS를 사용해봤는데 이클립스에서 하던 거랑 별 차이없는 거 같다.
이클립스에서 썼던 HttpServletRequest를 STS에서도 그대로 썼는데, 이럴거면 스프링을 왜 쓰지?
스프링 프레임워크를 쓰기 위해 스프링을 쓰고 그 스프링을 개발하기 위한 도구로 STS를 쓰는 건가?
스프링 프레임워크가 부트스트랩처럼 코드를 긁어와서 바로 사용할 수 있는 거면 어디서 긁어오는 거지?

결론
> 온통 의문이다.

